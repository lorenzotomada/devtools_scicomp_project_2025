Timer unit: 1e-06 s

Total time: 0 s
File: /home/lorenzo/devtools_scicomp_project_2025/src/pyclassify/utils.py
Function: distance at line 11

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                           @profile
    12                                           def distance(point1: list[float], point2: list[float]) -> float:
    13                                               """
    14                                               This function computes the square of the Euclidean distance between two points, point1 and point2.
    15                                               Inputs:
    16                                                   point1: list[float] the first point
    17                                                   point2: list[float] the second point
    18                                               Returns: float (distance between the points)
    19                                               """
    20                                               assert len(point1)==len(point2), f"Points have different dimensions: {len(point1)} != {len(point2)}"
    21                                               return sum((x - y) ** 2 for x, y in zip(point1, point2))

Total time: 0 s
File: /home/lorenzo/devtools_scicomp_project_2025/src/pyclassify/utils.py
Function: distance_numpy at line 25

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    25                                           @profile
    26                                           def distance_numpy(point1: np.ndarray, point2: np.ndarray) -> float:
    27                                               """
    28                                               Same as 'distance', but using numpy arrays
    29                                               """
    30                                               assert point1.shape==point2.shape,  f"Points have different dimensions: {point1.shape} != {point2.shape}"
    31                                               difference = point1 - point2
    32                                               square_norm = np.sum(difference ** 2) # float(np.dot(difference, difference))
    33                                               return square_norm

Total time: 0.00538268 s
File: /home/lorenzo/devtools_scicomp_project_2025/src/pyclassify/utils.py
Function: majority_vote at line 53

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    53                                           @profile
    54                                           def majority_vote(neighbors: list[int]) -> int:
    55                                               """
    56                                               This class returns the most common class (expressed as an integer) in a given list of neighbor labels.
    57                                               Input:
    58                                                   neighbors: list[int] (the labels of the neighbors)
    59                                               Returns:
    60                                                   int (result of majority voting)
    61                                               """
    62      3681       5382.7      1.5    100.0      return max(set(neighbors), key=neighbors.count)

Total time: 2.4956 s
File: /home/lorenzo/devtools_scicomp_project_2025/src/pyclassify/classifier.py
Function: _get_k_nearest_neighbors at line 26

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    26                                               @profile
    27                                               def _get_k_nearest_neighbors(self, X, y, x):
    28                                                   """
    29                                                   Method to get the k nearest neighbors of the point x.
    30                                                   Inputs:
    31                                                       X: list[lists[float]] or list[np.array] the list of points composing the dataset
    32                                                       x: list[float] or np.array (consistently with X). This is the point of which we want the neighbors
    33                                                       y: list[int] a vector containing the labels corresponding to points of X
    34                                                   """
    35      3681    1584278.7    430.4     63.5          enumerated_distances = list(enumerate([self.distance(X_i, x) for X_i in X]))
    36      3681     900276.6    244.6     36.1          sorted_distances = sorted(enumerated_distances, key=lambda x: x[1])        
    37                                           
    38      3681       5990.9      1.6      0.2          k_nearest_neighbors = [index for index, _ in sorted_distances[:self.k]]
    39      3681       4493.6      1.2      0.2          y_labels = [y[index] for index in k_nearest_neighbors]
    40      3681        561.1      0.2      0.0          return y_labels

Total time: 2.61572 s
File: /home/lorenzo/devtools_scicomp_project_2025/src/pyclassify/classifier.py
Function: __call__ at line 43

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    43                                               @profile
    44                                               def __call__(self, data: tuple[list[list[float]], list[int]], new_points: list[list[float]]) -> list[int]:
    45                                                   """
    46                                                   This method returns the predicted labels of a new set of points new_points given a training dataset data=(X, y).
    47                                                   Inputs:
    48                                                       data:  tuple[list[list[float]], list[int]] formed by the couple (X, y) of which the dataset consists
    49                                                       new_points: list[list[float]] points which we want to classify
    50                                                   Returns: list[int] the predicted labels corresponding to new_points
    51                                                   """
    52         1          1.2      1.2      0.0          predicted_labels = []
    53                                           
    54         1          3.4      3.4      0.0          if self.distance in (distance_numpy, distance_numba) :
    55         1       2793.6   2793.6      0.1              X_data = [np.array(X_i) for X_i in data[0]]
    56         1       9623.5   9623.5      0.4              _new_points= [np.array(point) for point in new_points] # created for conversion to np arrays
    57                                                   else:
    58                                                       X_data = data[0]
    59                                                       _new_points = new_points
    60         1          1.8      1.8      0.0          y_data = data[1]
    61                                           
    62      3682       1120.1      0.3      0.0          for point in _new_points:
    63      3681    2586006.9    702.5     98.9              closest_neighbors = self._get_k_nearest_neighbors(X_data, y_data, point)
    64      3681      14880.0      4.0      0.6              predicted_label = majority_vote(closest_neighbors)
    65      3681       1285.7      0.3      0.0              predicted_labels.append(predicted_label)
    66                                           
    67         1          0.2      0.2      0.0          return predicted_labels

  0.00 seconds - /home/lorenzo/devtools_scicomp_project_2025/src/pyclassify/utils.py:11 - distance
  0.00 seconds - /home/lorenzo/devtools_scicomp_project_2025/src/pyclassify/utils.py:25 - distance_numpy
  0.01 seconds - /home/lorenzo/devtools_scicomp_project_2025/src/pyclassify/utils.py:53 - majority_vote
  2.50 seconds - /home/lorenzo/devtools_scicomp_project_2025/src/pyclassify/classifier.py:26 - _get_k_nearest_neighbors
  2.62 seconds - /home/lorenzo/devtools_scicomp_project_2025/src/pyclassify/classifier.py:43 - __call__
